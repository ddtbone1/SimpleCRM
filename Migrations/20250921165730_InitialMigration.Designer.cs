// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleCRM.Data;

#nullable disable

namespace SimpleCRM.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20250921165730_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("SimpleCRM.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Sales",
                            Email = "agent@crm.local",
                            HireDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Agent User",
                            Phone = "555-0100",
                            Position = "Agent"
                        });
                });

            modelBuilder.Entity("SimpleCRM.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EntityType");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SimpleCRM.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@example.com",
                            IsActive = true,
                            Name = "Customer 1",
                            Phone = "555-1001"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer2@example.com",
                            IsActive = true,
                            Name = "Customer 2",
                            Phone = "555-1002"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer3@example.com",
                            IsActive = true,
                            Name = "Customer 3",
                            Phone = "555-1003"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer4@example.com",
                            IsActive = false,
                            Name = "Customer 4",
                            Phone = "555-1004"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer5@example.com",
                            IsActive = true,
                            Name = "Customer 5",
                            Phone = "555-1005"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer6@example.com",
                            IsActive = true,
                            Name = "Customer 6",
                            Phone = "555-1006"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer7@example.com",
                            IsActive = true,
                            Name = "Customer 7",
                            Phone = "555-1007"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer8@example.com",
                            IsActive = false,
                            Name = "Customer 8",
                            Phone = "555-1008"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer9@example.com",
                            IsActive = true,
                            Name = "Customer 9",
                            Phone = "555-1009"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer10@example.com",
                            IsActive = true,
                            Name = "Customer 10",
                            Phone = "555-1010"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer11@example.com",
                            IsActive = true,
                            Name = "Customer 11",
                            Phone = "555-1011"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer12@example.com",
                            IsActive = false,
                            Name = "Customer 12",
                            Phone = "555-1012"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer13@example.com",
                            IsActive = true,
                            Name = "Customer 13",
                            Phone = "555-1013"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer14@example.com",
                            IsActive = true,
                            Name = "Customer 14",
                            Phone = "555-1014"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer15@example.com",
                            IsActive = true,
                            Name = "Customer 15",
                            Phone = "555-1015"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer16@example.com",
                            IsActive = false,
                            Name = "Customer 16",
                            Phone = "555-1016"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer17@example.com",
                            IsActive = true,
                            Name = "Customer 17",
                            Phone = "555-1017"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2023, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer18@example.com",
                            IsActive = true,
                            Name = "Customer 18",
                            Phone = "555-1018"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2023, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer19@example.com",
                            IsActive = true,
                            Name = "Customer 19",
                            Phone = "555-1019"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer20@example.com",
                            IsActive = false,
                            Name = "Customer 20",
                            Phone = "555-1020"
                        });
                });

            modelBuilder.Entity("SimpleCRM.Models.TimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Hours")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimesheetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("TimesheetId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("SimpleCRM.Models.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovalComments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EditJustification")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("HoursWorked")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("DRAFT");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("Date");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Timesheets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 31",
                            EndTime = new DateTime(2023, 12, 31, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 6.5,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 31, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 30",
                            EndTime = new DateTime(2023, 12, 30, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 7.0,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 30, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 29",
                            EndTime = new DateTime(2023, 12, 29, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 7.5,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 29, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "PENDING",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 28",
                            EndTime = new DateTime(2023, 12, 28, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 6.0,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 28, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 27",
                            EndTime = new DateTime(2023, 12, 27, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 6.5,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 27, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 26",
                            EndTime = new DateTime(2023, 12, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 7.0,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 26, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "PENDING",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 25",
                            EndTime = new DateTime(2023, 12, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 7.5,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 25, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 24",
                            EndTime = new DateTime(2023, 12, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 6.0,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 23",
                            EndTime = new DateTime(2023, 12, 23, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 6.5,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "PENDING",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            ApprovalComments = "",
                            Category = "Development",
                            CreatedDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work completed on Dec 22",
                            EndTime = new DateTime(2023, 12, 22, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursWorked = 7.0,
                            IsBillable = true,
                            ProjectName = "Customer Project",
                            RejectionReason = "",
                            StartTime = new DateTime(2023, 12, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "APPROVED",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SimpleCRM.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovalComments")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EmailVerificationSentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@crm.local",
                            EmailVerified = true,
                            Password = "admin123",
                            Role = "Admin",
                            Status = "ACTIVE",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AgentId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "agent@crm.local",
                            EmailVerified = true,
                            Password = "agent123",
                            Role = "User",
                            Status = "ACTIVE",
                            Username = "agent"
                        });
                });

            modelBuilder.Entity("SimpleCRM.Models.AuditLog", b =>
                {
                    b.HasOne("SimpleCRM.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleCRM.Models.TimeEntry", b =>
                {
                    b.HasOne("SimpleCRM.Models.Timesheet", "Timesheet")
                        .WithMany("TimeEntries")
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCRM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Timesheet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleCRM.Models.Timesheet", b =>
                {
                    b.HasOne("SimpleCRM.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SimpleCRM.Models.User", "User")
                        .WithMany("Timesheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleCRM.Models.User", b =>
                {
                    b.HasOne("SimpleCRM.Models.Agent", "Agent")
                        .WithOne("User")
                        .HasForeignKey("SimpleCRM.Models.User", "AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("SimpleCRM.Models.Agent", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleCRM.Models.Timesheet", b =>
                {
                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("SimpleCRM.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Timesheets");
                });
#pragma warning restore 612, 618
        }
    }
}
