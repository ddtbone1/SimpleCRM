@model dynamic

@{
    ViewData["Title"] = "Dashboard";
}

<div class="max-w-6xl mx-auto mt-12">
    <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-800">Welcome, @Model.Username!</h1>
        <p class="text-lg text-gray-600">@(Model.IsAdmin ? "Administrator" : "User") Dashboard</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Total Customers Card -->
        <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 shadow-lg text-white">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-blue-100">Total Customers</p>
                    <span class="text-3xl font-bold">@Model.TotalCustomers</span>
                </div>
                <div class="text-blue-200">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z" />
                    </svg>
                </div>
            </div>
        </div>

        @if (Model.IsAdmin)
        {
            <!-- Total Agents Card (Admin Only) -->
            <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 shadow-lg text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-green-100">Total Agents</p>
                        <span class="text-3xl font-bold">@Model.TotalAgents</span>
                    </div>
                    <div class="text-green-200">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m.94 3.198l.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0112 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 016 18.719m12 0a5.971 5.971 0 00-.941-3.197m0 0A5.995 5.995 0 0012 12.75a5.995 5.995 0 00-5.058 2.772m0 0a3 3 0 00-4.681 2.72 8.986 8.986 0 003.74.477m.94-3.197a5.971 5.971 0 00-.94 3.197M15 6.75a3 3 0 11-6 0 3 3 0 016 0zm6 3a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zm-13.5 0a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z" />
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Total Users Card (Admin Only) -->
            <div class="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 shadow-lg text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-purple-100">Total Users</p>
                        <span class="text-3xl font-bold">@Model.TotalUsers</span>
                    </div>
                    <div class="text-purple-200">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                    </div>
                </div>
            </div>
        }

        <!-- Timesheet Entries Card -->
        <div class="bg-gradient-to-r from-red-500 to-red-600 rounded-xl p-6 shadow-lg text-white">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-red-100">@(Model.IsAdmin ? "All Timesheet Entries" : "My Timesheet Entries")</p>
                    <span class="text-3xl font-bold">@Model.TotalTimesheetEntries</span>
                </div>
                <div class="text-red-200">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
            </div>
        </div>
    </div>

    <!-- Analytics Cards Section -->
    <div class="mt-8">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">📊 Analytics & Statistics</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Customer Growth Chart -->
            <div class="bg-white p-6 rounded-xl shadow-lg">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Customer Growth</h3>
                <div class="h-48 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg flex items-center justify-center relative">
                    <canvas id="customerChart" class="absolute inset-0 w-full h-full"></canvas>
                    <div class="text-center z-10 bg-white bg-opacity-90 rounded-lg p-4 shadow-sm">
                        <div class="text-3xl font-bold text-blue-600">@Model.TotalCustomers</div>
                        <div class="text-sm text-gray-700 font-medium">Total Customers</div>
                        <div class="text-xs text-green-600 mt-1 font-semibold">↗ +12% this month</div>
                    </div>
                </div>
            </div>

            <!-- Timesheet Statistics -->
            <div class="bg-white p-6 rounded-xl shadow-lg">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">@(Model.IsAdmin ? "All Timesheet Stats" : "Your Timesheet Stats")</h3>
                <div class="h-48 bg-gradient-to-r from-orange-50 to-red-100 rounded-lg flex items-center justify-center relative">
                    <canvas id="timesheetChart" class="absolute inset-0 w-full h-full"></canvas>
                    <div class="text-center z-10 bg-white bg-opacity-90 rounded-lg p-4 shadow-sm">
                        <div class="text-3xl font-bold text-red-600">@Model.TotalTimesheetEntries</div>
                        <div class="text-sm text-gray-700 font-medium">@(Model.IsAdmin ? "Total Entries" : "Your Entries")</div>
                        <div class="text-xs text-green-600 mt-1 font-semibold">↗ +8% this week</div>
                    </div>
                </div>
            </div>

            @if (Model.IsAdmin)
            {
                <!-- Agent Performance Chart -->
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Agent Performance</h3>
                    <div class="h-48 bg-gradient-to-r from-green-50 to-green-100 rounded-lg flex items-center justify-center relative">
                        <canvas id="agentChart" class="absolute inset-0 w-full h-full"></canvas>
                        <div class="text-center z-10 bg-white bg-opacity-90 rounded-lg p-4 shadow-sm">
                            <div class="text-3xl font-bold text-green-600">@Model.TotalAgents</div>
                            <div class="text-sm text-gray-700 font-medium">Active Agents</div>
                            <div class="text-xs text-blue-600 mt-1 font-semibold">95% efficiency</div>
                        </div>
                    </div>
                </div>

                <!-- User Activity Chart -->
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">User Activity</h3>
                    <div class="h-48 bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg flex items-center justify-center relative">
                        <canvas id="userChart" class="absolute inset-0 w-full h-full"></canvas>
                        <div class="text-center z-10 bg-white bg-opacity-90 rounded-lg p-4 shadow-sm">
                            <div class="text-3xl font-bold text-purple-600">@Model.TotalUsers</div>
                            <div class="text-sm text-gray-700 font-medium">Total Users</div>
                            <div class="text-xs text-green-600 mt-1 font-semibold">↗ 89% active</div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Personal Productivity Chart -->
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Your Productivity</h3>
                    <div class="h-48 bg-gradient-to-r from-indigo-50 to-indigo-100 rounded-lg flex items-center justify-center relative">
                        <canvas id="productivityChart" class="absolute inset-0 w-full h-full"></canvas>
                        <div class="text-center z-10 bg-white bg-opacity-90 rounded-lg p-4 shadow-sm">
                            <div class="text-3xl font-bold text-indigo-600">8.5</div>
                            <div class="text-sm text-gray-700 font-medium">Avg Hours/Day</div>
                            <div class="text-xs text-green-600 mt-1 font-semibold">↗ +15% this week</div>
                        </div>
                    </div>
                </div>

                <!-- Weekly Goals Chart -->
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Weekly Goals</h3>
                    <div class="h-48 bg-gradient-to-r from-teal-50 to-teal-100 rounded-lg flex items-center justify-center relative">
                        <canvas id="goalsChart" class="absolute inset-0 w-full h-full"></canvas>
                        <div class="text-center z-10 bg-white bg-opacity-90 rounded-lg p-4 shadow-sm">
                            <div class="text-3xl font-bold text-teal-600">85%</div>
                            <div class="text-sm text-gray-700 font-medium">Goal Completion</div>
                            <div class="text-xs text-green-600 mt-1 font-semibold">34/40 hours</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="mt-8">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">⚡ Quick Actions</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <a asp-controller="Customers" asp-action="Index" class="bg-white p-6 rounded-lg shadow hover:shadow-lg transition block">
                <h3 class="text-lg font-semibold text-gray-800">👥 View Customers</h3>
                <p class="text-gray-600">@(Model.IsAdmin ? "Manage customer records" : "View customer information")</p>
            </a>
            
            @if (Model.IsAdmin)
            {
                <a asp-controller="Agents" asp-action="Index" class="bg-white p-6 rounded-lg shadow hover:shadow-lg transition block">
                    <h3 class="text-lg font-semibold text-gray-800">👨‍💼 Manage Agents</h3>
                    <p class="text-gray-600">Add, edit, and manage agents</p>
                </a>
            }
            
            <a asp-controller="Timesheet" asp-action="Index" class="bg-white p-6 rounded-lg shadow hover:shadow-lg transition block">
                <h3 class="text-lg font-semibold text-gray-800">⏰ Timesheet</h3>
                <p class="text-gray-600">@(Model.IsAdmin ? "View all timesheets" : "Manage your timesheet")</p>
            </a>
        </div>
    </div>
</div>

<script>
// Simple chart drawing functions using Canvas
document.addEventListener('DOMContentLoaded', function() {
    
    // Customer Growth Chart
    drawLineChart('customerChart', [15, 25, 35, 42, 50], '#3B82F6');
    
    // Timesheet Chart
    // Timesheet Chart
    drawBarChart('timesheetChart', [8, 12, 15, 18, 20], '#EF4444');
    
    var isAdmin = @(Model.IsAdmin ? "true" : "false");
    
    if (isAdmin) {
        // Agent Performance Chart
        drawPieChart('agentChart', [40, 30, 20, 10], ['#10B981', '#F59E0B', '#EF4444', '#8B5CF6']);
        
        // User Activity Chart
        drawAreaChart('userChart', [10, 15, 12, 18, 25], '#8B5CF6');
    } else {
        // Personal Productivity Chart
        drawLineChart('productivityChart', [7, 8, 8.5, 9, 8.5], '#6366F1');
        
        // Weekly Goals Chart
        drawDonutChart('goalsChart', 85, '#14B8A6');
    }
});

function drawLineChart(canvasId, data, color) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width = canvas.offsetWidth;
    const height = canvas.height = canvas.offsetHeight;
    
    ctx.clearRect(0, 0, width, height);
    ctx.strokeStyle = color;
    ctx.lineWidth = 3;
    ctx.fillStyle = color + '20';
    
    const padding = 20;
    const chartWidth = width - 2 * padding;
    const chartHeight = height - 2 * padding;
    
    const max = Math.max(...data);
    const stepX = chartWidth / (data.length - 1);
    
    // Draw line
    ctx.beginPath();
    data.forEach((point, index) => {
        const x = padding + index * stepX;
        const y = padding + (1 - point / max) * chartHeight;
        if (index === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
    });
    ctx.stroke();
    
    // Fill area under line
    ctx.lineTo(padding + (data.length - 1) * stepX, height - padding);
    ctx.lineTo(padding, height - padding);
    ctx.closePath();
    ctx.fill();
}

function drawBarChart(canvasId, data, color) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width = canvas.offsetWidth;
    const height = canvas.height = canvas.offsetHeight;
    
    ctx.clearRect(0, 0, width, height);
    ctx.fillStyle = color;
    
    const padding = 20;
    const chartWidth = width - 2 * padding;
    const chartHeight = height - 2 * padding;
    
    const max = Math.max(...data);
    const barWidth = chartWidth / data.length - 5;
    
    data.forEach((value, index) => {
        const barHeight = (value / max) * chartHeight;
        const x = padding + index * (barWidth + 5);
        const y = height - padding - barHeight;
        
        ctx.fillRect(x, y, barWidth, barHeight);
    });
}

function drawPieChart(canvasId, data, colors) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width = canvas.offsetWidth;
    const height = canvas.height = canvas.offsetHeight;
    
    ctx.clearRect(0, 0, width, height);
    
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 3;
    
    const total = data.reduce((sum, value) => sum + value, 0);
    let currentAngle = 0;
    
    data.forEach((value, index) => {
        const sliceAngle = (value / total) * 2 * Math.PI;
        
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
        ctx.closePath();
        ctx.fillStyle = colors[index];
        ctx.fill();
        
        currentAngle += sliceAngle;
    });
}

function drawAreaChart(canvasId, data, color) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width = canvas.offsetWidth;
    const height = canvas.height = canvas.offsetHeight;
    
    ctx.clearRect(0, 0, width, height);
    
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, color + '60');
    gradient.addColorStop(1, color + '10');
    
    ctx.fillStyle = gradient;
    ctx.strokeStyle = color;
    ctx.lineWidth = 2;
    
    const padding = 20;
    const chartWidth = width - 2 * padding;
    const chartHeight = height - 2 * padding;
    
    const max = Math.max(...data);
    const stepX = chartWidth / (data.length - 1);
    
    ctx.beginPath();
    ctx.moveTo(padding, height - padding);
    
    data.forEach((point, index) => {
        const x = padding + index * stepX;
        const y = padding + (1 - point / max) * chartHeight;
        ctx.lineTo(x, y);
    });
    
    ctx.lineTo(padding + (data.length - 1) * stepX, height - padding);
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
}

function drawDonutChart(canvasId, percentage, color) {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    const width = canvas.width = canvas.offsetWidth;
    const height = canvas.height = canvas.offsetHeight;
    
    ctx.clearRect(0, 0, width, height);
    
    const centerX = width / 2;
    const centerY = height / 2;
    const outerRadius = Math.min(width, height) / 3;
    const innerRadius = outerRadius * 0.6;
    
    // Background circle
    ctx.beginPath();
    ctx.arc(centerX, centerY, outerRadius, 0, 2 * Math.PI);
    ctx.fillStyle = '#E5E7EB';
    ctx.fill();
    
    // Progress arc
    const endAngle = (percentage / 100) * 2 * Math.PI - Math.PI / 2;
    ctx.beginPath();
    ctx.arc(centerX, centerY, outerRadius, -Math.PI / 2, endAngle);
    ctx.fillStyle = color;
    ctx.fill();
    
    // Inner circle (donut hole)
    ctx.beginPath();
    ctx.arc(centerX, centerY, innerRadius, 0, 2 * Math.PI);
    ctx.fillStyle = '#FFFFFF';
    ctx.fill();
}
</script>